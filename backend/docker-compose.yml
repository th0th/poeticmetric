version: "3.9"

x-backend-common: &backend-common
  build:
    context: .
    dockerfile: ./development.Dockerfile
  depends_on:
    - clickhouse
    - postgres
    - rabbitmq
  image: ghcr.io/poeticmetric/poeticmetric-backend:development
  environment: &backend-common-environment
    POETICMETRIC_CLICKHOUSE_DATABASE: ${POETICMETRIC_CLICKHOUSE_DATABASE}
    POETICMETRIC_CLICKHOUSE_HOST: ${POETICMETRIC_CLICKHOUSE_HOST}
    POETICMETRIC_CLICKHOUSE_PASSWORD: ${POETICMETRIC_CLICKHOUSE_PASSWORD}
    POETICMETRIC_CLICKHOUSE_TCP_PORT: ${POETICMETRIC_CLICKHOUSE_TCP_PORT}
    POETICMETRIC_CLICKHOUSE_USER: ${POETICMETRIC_CLICKHOUSE_USER}
    POETICMETRIC_DEBUG: ${POETICMETRIC_DEBUG}
    POETICMETRIC_FRONTEND_BASE_URL: ${POETICMETRIC_FRONTEND_BASE_URL}
    POETICMETRIC_POSTGRES_DATABASE: ${POETICMETRIC_POSTGRES_DATABASE}
    POETICMETRIC_POSTGRES_HOST: ${POETICMETRIC_POSTGRES_HOST}
    POETICMETRIC_POSTGRES_PASSWORD: ${POETICMETRIC_POSTGRES_PASSWORD}
    POETICMETRIC_POSTGRES_PORT: ${POETICMETRIC_POSTGRES_PORT}
    POETICMETRIC_POSTGRES_USER: ${POETICMETRIC_POSTGRES_USER}
    POETICMETRIC_RABBITMQ_HOST: ${POETICMETRIC_RABBITMQ_HOST}
    POETICMETRIC_RABBITMQ_PASSWORD: ${POETICMETRIC_RABBITMQ_PASSWORD}
    POETICMETRIC_RABBITMQ_PORT: ${POETICMETRIC_RABBITMQ_PORT}
    POETICMETRIC_RABBITMQ_USER: ${POETICMETRIC_RABBITMQ_USER}
    POETICMETRIC_RABBITMQ_VHOST: ${POETICMETRIC_RABBITMQ_VHOST}
    POETICMETRIC_REDIS_HOST: ${POETICMETRIC_REDIS_HOST}
    POETICMETRIC_REDIS_PASSWORD: ${POETICMETRIC_REDIS_PASSWORD}
    POETICMETRIC_REDIS_PORT: ${POETICMETRIC_REDIS_PORT}
    POETICMETRIC_RESOURCES_BASE_URL: ${POETICMETRIC_RESOURCES_BASE_URL}
    POETICMETRIC_REST_API_BASE_URL: ${POETICMETRIC_REST_API_BASE_URL}
    POETICMETRIC_REST_API_DEBUG: ${POETICMETRIC_REST_API_DEBUG}
    POETICMETRIC_SCHEDULER_DEBUG: ${POETICMETRIC_SCHEDULER_DEBUG}
    POETICMETRIC_SEEDER_DEBUG: ${POETICMETRIC_SEEDER_DEBUG}
    POETICMETRIC_SENTRY_DSN: ${POETICMETRIC_SENTRY_DSN}
    POETICMETRIC_STAGE: ${POETICMETRIC_STAGE}
    POETICMETRIC_STRIPE_SECRET_KEY: ${POETICMETRIC_STRIPE_SECRET_KEY}
    POETICMETRIC_STRIPE_WEBHOOK_SIGNING_SECRET: ${POETICMETRIC_STRIPE_WEBHOOK_SIGNING_SECRET}
    POETICMETRIC_WEBHOOK_URL: ${POETICMETRIC_WEBHOOK_URL}
    POETICMETRIC_WORKER_CONCURRENCY: ${POETICMETRIC_WORKER_CONCURRENCY}
    POETICMETRIC_WORKER_DEBUG: ${POETICMETRIC_WORKER_DEBUG}
  tty: true
  volumes:
    - ./assets:/poeticmetric/assets
    - ./cmd:/poeticmetric/cmd
    - ./migrations:/poeticmetric/migrations
    - ./pkg:/poeticmetric/pkg
    - ./scripts/migrate-clickhouse:/usr/local/bin/migrate-clickhouse
    - ./scripts/migrate-postgres:/usr/local/bin/migrate-postgres
    - ./scripts/run-tests:/usr/local/bin/run-tests
    - ./scripts/wait-for-it:/usr/local/bin/wait-for-it
    - ./go.mod:/poeticmetric/go.mod
    - ./go.sum:/poeticmetric/go.sum

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}

volumes:
  postgres:
  clickhouse:

services:
  clickhouse:
    environment:
      CLICKHOUSE_DB: "${POETICMETRIC_CLICKHOUSE_DATABASE}"
      CLICKHOUSE_PASSWORD: "${POETICMETRIC_CLICKHOUSE_PASSWORD}"
      CLICKHOUSE_USER: "${POETICMETRIC_CLICKHOUSE_USER}"
    image: clickhouse/clickhouse-server:latest-alpine
    ports:
      - "127.0.0.1:${COMPOSE_CLICKHOUSE_HOST_PORT}:8123"
    volumes:
      - clickhouse:/var/lib/clickhouse

  ingress:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    image: jwilder/nginx-proxy
    ports:
      - "127.0.0.1:443:443"
      - "127.0.0.1:80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./etc/ssl:/etc/nginx/certs
      - ./etc/ingress/dev.poeticmetric.com.nginx:/etc/nginx/conf.d/dev.poeticmetric.com.conf

  postgres:
    environment:
      POSTGRES_DB: "${POETICMETRIC_POSTGRES_DATABASE}"
      POSTGRES_PASSWORD: "${POETICMETRIC_POSTGRES_PASSWORD}"
      POSTGRES_USER: "${POETICMETRIC_POSTGRES_USER}"
    image: postgres:14-alpine
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:${COMPOSE_POSTGRES_HOST_PORT}:5432"

  rabbitmq:
    environment:
      RABBITMQ_DEFAULT_PASS: "${POETICMETRIC_RABBITMQ_PASSWORD}"
      RABBITMQ_DEFAULT_USER: "${POETICMETRIC_RABBITMQ_USER}"
      RABBITMQ_DEFAULT_VHOST: "${POETICMETRIC_RABBITMQ_VHOST}"
      VIRTUAL_HOST: rabbitmq.dev.poeticmetric.com
      VIRTUAL_PORT: "15672"
    image: rabbitmq:3-management-alpine
    ports:
      - "127.0.0.1:${COMPOSE_RABBITMQ_HOST_PORT}:5672"
      - "127.0.0.1:${COMPOSE_RABBITMQ_MANAGEMENT_HOST_PORT}:15672"

  redis:
    command:
      - "redis-server"
      - "--requirepass"
      - "${POETICMETRIC_REDIS_PASSWORD}"
    environment:
      POETICMETRIC_REDIS_PASSWORD: "${POETICMETRIC_REDIS_PASSWORD}"
    image: redis:7-alpine

  rest-api:
    <<: *backend-common
    depends_on:
      - clickhouse
      - postgres
      - rabbitmq
    environment:
      <<: *backend-common-environment
      POETICMETRIC_INSTANCE: rest-api
      VIRTUAL_HOST: api.dev.poeticmetric.com
    ports:
      - "127.0.0.1:${POETICMETRIC_REST_API_DEBUG_PORT}:2345"

  scheduler:
    <<: *backend-common
    depends_on:
      - rabbitmq
    environment:
      <<: *backend-common-environment
      POETICMETRIC_INSTANCE: scheduler
    ports:
      - "127.0.0.1:${POETICMETRIC_SCHEDULER_DEBUG_PORT}:2345"

  stripe-webhook:
    environment:
      STRIPE_API_KEY: ${POETICMETRIC_STRIPE_SECRET_KEY}
      STRIPE_DEVICE_NAME: poeticmetric-development-stripe-webhook
    command:
      - "listen"
      - "--forward-to"
      - "rest-api/stripe/webhook"
      - "--events"
      - "customer.subscription.created,customer.subscription.deleted,customer.subscription.updated"
    image: stripe/stripe-cli

  worker:
    <<: *backend-common
    depends_on:
      - clickhouse
      - postgres
      - rabbitmq
    environment:
      <<: *backend-common-environment
      POETICMETRIC_INSTANCE: worker
      POETICMETRIC_WORKER_QUEUES: _all_
    ports:
      - "127.0.0.1:${POETICMETRIC_WORKER_DEBUG_PORT}:2345"
