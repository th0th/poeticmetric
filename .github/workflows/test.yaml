env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_SCAN_SUGGEST: false
name: Test
on:
  pull_request:
jobs:
  review-frontend-code:
    if: github.event.pull_request.draft == false
    name: Review frontend code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 19.6.0

      - name: Install custom npm version
        run: npm i -g npm@8.19.3

      - id: restore-npm-cache
        name: Restore npm cache
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          path: ~/.npm

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - if: steps.restore-npm-cache.outputs.cache-hit != 'true'
        name: Save npm cache
        uses: actions/cache/save@v3
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          path: ~/.npm

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1

      # TODO: Delete this step when https://github.com/reviewdog/action-eslint/issues/152 is resolved.
      - name: Install custom npm version
        run: npm i -g npm@8.19.3

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Run tsc
        run: npm exec --offline -- tsc | reviewdog -f=tsc -fail-on-error -filter-mode=nofilter -reporter=github-pr-review
        working-directory: frontend

      - name: Run eslint
        uses: reviewdog/action-eslint@v1
        with:
          eslint_flags: '--ext .js,.ts,.tsx .'
          fail_on_error: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          filter_mode: nofilter
          workdir: frontend

      - name: Run stylelint
        uses: reviewdog/action-stylelint@v1
        with:
          fail_on_error: true
          filter_mode: nofilter
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          stylelint_input: '**/*.scss'
          workdir: frontend

  run-tests:
    environment: testing
    if: github.event.pull_request.draft == false
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy env file
        run: cp .env.example .env

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract backend metadata for docker
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend
          tags: type=raw,value=development

      - name: Extract frontend metadata for docker
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend
          tags: type=raw,value=development

      - name: Build backend docker image
        uses: docker/build-push-action@v4
        with:
          cache-from: scope=test-backend,type=gha
          cache-to: mode=max,scope=test-backend,type=gha
          context: backend
          file: backend/development.Dockerfile
          load: true
          tags: ${{ steps.meta-backend.outputs.tags }}

      - name: Build frontend docker image
        uses: docker/build-push-action@v4
        with:
          cache-from: scope=test-frontend,type=gha
          cache-to: mode=max,scope=test-frontend,type=gha
          context: frontend
          file: frontend/development.Dockerfile
          load: true
          tags: ${{ steps.meta-frontend.outputs.tags }}

      - uses: actions/setup-node@v3
        with:
          node-version: 19.6.0

      - id: restore-npm-cache
        name: Restore npm cache
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          path: ~/.npm

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - if: steps.restore-npm-cache.outputs.cache-hit != 'true'
        name: Save npm cache
        uses: actions/cache/save@v3
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          path: ~/.npm

      - name: Pull docker images
        run: docker compose pull clickhouse nginx-proxy postgres redis

      - name: Prepare for backend tests
        run: |
          docker compose up -d clickhouse postgres redis
          
          # prepare Postgres database
          printf "Waiting for Postgres...\n"
          docker compose run --rm --entrypoint 'bash -c "wait-for-it -q -s -t 0 "${POSTGRES_HOST}":"${POSTGRES_PORT}" -- echo \"Postgres is ready!\""' rest-api
          docker compose exec postgres bash -c 'export PGPASSWORD=${POSTGRES_PASSWORD} && dropdb --if-exists --username=${POSTGRES_USER} ${POSTGRES_DB}'
          docker compose exec postgres bash -c 'export PGPASSWORD=${POSTGRES_PASSWORD} && createdb --username=${POSTGRES_USER} ${POSTGRES_DB}'
          
          # prepare ClickHouse database
          printf "Waiting for ClickHouse...\n"
          docker compose run --rm --entrypoint 'bash -c "wait-for-it -q -s -t 0 "${CLICKHOUSE_HOST}":"${CLICKHOUSE_TCP_PORT}" -- echo \"ClickHouse is ready!\""' rest-api
          docker compose exec clickhouse bash -c 'clickhouse-client --query "drop database if exists ${CLICKHOUSE_DB};"'
          docker compose exec clickhouse bash -c 'clickhouse-client --query "create database ${CLICKHOUSE_DB};"'
          
          # migrate databases
          docker compose run --rm --entrypoint 'bash -c "cd cmd/migrator && go run ."' rest-api

      - name: Run backend tests
        run: docker compose run --rm rest-api go test ./... 2> /dev/null

      - env:
          FRONTEND_BASE_URL: ${{ vars.FRONTEND_BASE_URL }}
          REST_API_BASE_URL: ${{ vars.REST_API_BASE_URL }}
        name: Prepare for frontend tests
        run: |
          docker compose down
          docker volume prune -f
          docker compose up -d clickhouse frontend nginx-proxy postgres redis rest-api
          docker compose run --rm --entrypoint 'bash -c "wait-for-it -q -s -t 0 rest-api:80 -- echo \"REST API is ready!\""' rest-api

      - name: Install Google Chrome
        run: npm exec -- playwright install chrome
        working-directory: frontend

      - env:
          FRONTEND_BASE_URL: ${{ vars.FRONTEND_BASE_URL }}
        name: Run Playwright tests
        run: npm exec -- playwright test --project="Google Chrome"
        working-directory: frontend

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30
