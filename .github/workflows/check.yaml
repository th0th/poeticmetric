env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_SCAN_SUGGEST: false
name: Check
on:
  pull_request:
jobs:
  build-frontend-docker-image:
    if: github.event.pull_request.draft == false
    name: Build frontend docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend
          tags: type=raw,value=development

      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: frontend
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  run-backend-tests:
    if: github.event.pull_request.draft == false
    name: Run backend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend
          tags: type=raw,value=development

      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: backend
          file: backend/development.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Create .env file
        run: cp .env.example .env

      - name: Run tests
        run: make test

  run-frontend-tests:
    if: github.event.pull_request.draft == false
    name: Run frontend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run tsc
        uses: EPMatt/reviewdog-action-tsc@v1
        with:
          fail_on_error: true
          filter_mode: nofilter
          reporter: github-pr-review
          workdir: frontend

      - name: Run eslint
        uses: reviewdog/action-eslint@v1
        with:
          eslint_flags: '--ext .js,.ts,.tsx .'
          fail_on_error: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          filter_mode: nofilter
          workdir: frontend

      - name: Run stylelint
        uses: reviewdog/action-stylelint@v1
        with:
          fail_on_error: true
          filter_mode: nofilter
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          stylelint_input: '**/*.scss'
          workdir: frontend
