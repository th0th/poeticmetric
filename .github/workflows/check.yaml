env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_SCAN_SUGGEST: false
name: Check
on:
  pull_request:
jobs:
  run-backend-tests:
    if: github.event.pull_request.draft == false
    name: Run backend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend
          tags: type=raw,value=development

      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          cache-from: scope=check,type=gha
          cache-to: mode=max,scope=check,type=gha
          context: backend
          file: backend/development.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Prepare for tests
        run: |
          cp .env.example .env
          
          docker compose up -d clickhouse postgres redis
          
          # prepare Postgres database
          printf "Waiting for Postgres...\n"
          docker compose run --rm --entrypoint 'bash -c "wait-for-it -s -q "${POSTGRES_HOST}":"${POSTGRES_PORT}" -- echo \"Postgres is ready!\""' rest-api
          docker compose exec -- postgres bash -c 'export PGPASSWORD=${POSTGRES_PASSWORD} && dropdb --if-exists --username=${POSTGRES_USER} ${POSTGRES_DB}'
          docker compose exec -- postgres bash -c 'export PGPASSWORD=${POSTGRES_PASSWORD} && createdb --username=${POSTGRES_USER} ${POSTGRES_DB}'
          
          # prepare ClickHouse database
          printf "Waiting for ClickHouse...\n"
          docker compose run --rm --entrypoint 'bash -c "wait-for-it -s -q "${CLICKHOUSE_HOST}":"${CLICKHOUSE_TCP_PORT}" -- echo \"ClickHouse is ready!\""' rest-api
          docker compose exec -- clickhouse bash -c 'clickhouse-client --query "drop database if exists ${CLICKHOUSE_DB};"'
          docker compose exec -- clickhouse bash -c 'clickhouse-client --query "create database ${CLICKHOUSE_DB};"'
          
          # migrate databases
          docker compose run --rm --entrypoint 'bash -c "cd cmd/migrator && go run ."' rest-api

      - name: Run tests
        run: docker compose run --rm rest-api go test ./... 2> /dev/null

  run-frontend-tests:
    if: github.event.pull_request.draft == false
    name: Run frontend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: actions/setup-node@v3
        with:
          node-version: 19.6.0

      # TODO: Delete this step when https://github.com/reviewdog/action-eslint/issues/152 is resolved.
      - name: Install custom npm version
        run: npm i -g npm@8.19.3

      - if: steps.cache.outputs.cache-hit != 'true'
        name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1

      - env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Run tsc
        run: npm exec --offline -- tsc | reviewdog -f=tsc -fail-on-error -filter-mode=nofilter -reporter=github-pr-review
        working-directory: frontend

      - name: Run eslint
        uses: reviewdog/action-eslint@v1
        with:
          eslint_flags: '--ext .js,.ts,.tsx .'
          fail_on_error: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          filter_mode: nofilter
          workdir: frontend

      - name: Run stylelint
        uses: reviewdog/action-stylelint@v1
        with:
          fail_on_error: true
          filter_mode: nofilter
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          stylelint_input: '**/*.scss'
          workdir: frontend

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata for docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend
          tags: type=raw,value=development

      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          cache-from: scope=check,type=gha
          cache-to: mode=max,scope=check,type=gha
          context: frontend
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
